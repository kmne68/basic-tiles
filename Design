Basic Tiles

The purpose of this program is to provide a basic tile-based gaming environment.

The game loop in Game.java paints the map, player and other game objects including
monsters and loot.

Start [click executable]
Show open (loading) screen while game loads
Start screen (game options)
    start
    options
    save (2.0)
    quit
[START] Load game view
Generate map
Draw map
Generate objects
Draw objects [inanimate objects, NPCs, animals]
Draw Player [initially w/o customization, customize in 2.0]

--------------------------------

Object types and locations are generated randomly.

Create the map:

for the width of the map
  for the length of the map
    if tile is blocked, change it to a random color
Create an array or list of objects to be added to the map
Create the algorithm that assigns objects to tiles

Determine object attributes:
Location (x, y coordinates)
Blocking (boolean)
Structure (type, size)
Vegetation
Geology
Mineralogy
Fauna

---------------------

Object Attributes
ID          int
Active      boolean                 Inactive = destroyed, or no longer on the map (e.g. moved to inventory)
Type        int                     Weapon, loot, furniture, hut, etc.
Description String
Reactive    boolean                 Not sure about this, it would be a flag for objects with actions such as traps
Mass        int
Size        int                     pocket, pack, cart, immovable

---------------------

Routines
int getObject()             // return id of object
void stashObject()          // remove from map, place in inventory


---------------------

1. attempt move to new location
2. test whether move is allowed
3a. if not blocked move to new location
4. test whether new location has an object
3b. if blocked do nothing



Need a Map.update() fxn that is called by entity objects that alter the map.
Need an Entity.hasConsequences() method that returns the id of a consequence if an object has consequences for the player
Has object needs to return an int--the objectID

Implement prepared statements
Implement threads